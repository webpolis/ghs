name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "tag_name=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get the current tag being released
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            CURRENT_TAG="v${{ github.event.inputs.version }}"
          else
            CURRENT_TAG="${GITHUB_REF#refs/tags/}"
          fi

          # Get the last release tag (excluding the current one being created)
          LAST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | grep -v "^${CURRENT_TAG}$" | head -1)

          if [ -z "$LAST_TAG" ]; then
            # If no previous tag, get all commits
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" HEAD)
          else
            # Get commits since last tag
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD)
          fi

          # Create changelog
          CHANGELOG="## What's Changed"$'\n'
          if [ -z "$COMMITS" ]; then
            CHANGELOG+="- No changes since last release"
          else
            CHANGELOG+="$COMMITS"
          fi

          # Escape for GitHub output
          {
            echo "changelog<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          release_name: Release ${{ steps.get_version.outputs.tag_name }}
          draft: false
          prerelease: false
          body: ${{ steps.changelog.outputs.changelog }}

      - name: Get built package info
        id: get_package_info
        run: |
          wheel_file=$(ls dist/*.whl | head -1)
          tar_file=$(ls dist/*.tar.gz | head -1)
          wheel_name=$(basename "$wheel_file")
          tar_name=$(basename "$tar_file")
          echo "wheel_path=$wheel_file" >> $GITHUB_OUTPUT
          echo "wheel_name=$wheel_name" >> $GITHUB_OUTPUT
          echo "tar_path=$tar_file" >> $GITHUB_OUTPUT
          echo "tar_name=$tar_name" >> $GITHUB_OUTPUT

      - name: Upload wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.get_package_info.outputs.wheel_path }}
          asset_name: ${{ steps.get_package_info.outputs.wheel_name }}
          asset_content_type: application/zip

      - name: Upload source distribution to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.get_package_info.outputs.tar_path }}
          asset_name: ${{ steps.get_package_info.outputs.tar_name }}
          asset_content_type: application/gzip

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload dist/*
